{"version":3,"sources":["components/functions.js","components/ForecastDay.js","components/ForecastCurrent.js","components/ForecastDays.js","components/ForecastList.js","components/Forecast.js","App.js","index.js"],"names":["formatDegree","deg","sign","Math","round","setDate","timestamp","date","Date","dayName","toLocaleString","weekday","dayDate","getDate","month","ForecastDaily","props","humidity","wind","imageUrl","item","weather","icon","className","dt","src","clouds","wind_speed","temp","morn","feels_like","day","eve","night","index","ForecastCurrent","current","city","name","ForecastDays","max","ForecastList","useState","tab","setTab","TabContext","value","forecast","daily","map","TabPanel","ForecastDay","AppBar","position","TabList","orientation","onChange","event","newTab","indicatorColor","variant","Tab","label","appID","defaultCoords","lat","lon","ForecastWeather","setForecast","setCity","load","setLoad","coords","setCoords","error","setError","fetchData","urlForecast","fetch","then","response","json","fetchForecast","result","urlCity","fetchCity","res","useEffect","Promise","rej","navigator","geolocation","getCurrentPosition","latitude","toFixed","longitude","App","Forecast","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9501de2.chunk.js","sourcesContent":["export function formatDegree(deg){\r\n  let sign = '';\r\n  if(deg < 0) sign = '-';\r\n  return sign + Math.round(deg) + ' Â°C'\r\n}\r\n\r\nexport function setDate(timestamp){\r\n  const date = new Date(timestamp * 1000);\r\n\r\n  return {\r\n    dayName: date.toLocaleString('en-us', {weekday: 'short'}),\r\n    dayDate: date.getDate() + ' ' +  date.toLocaleString('en-us', { month: 'long' })\r\n  }\r\n}\r\n\r\nexport function formatWind(wind){\r\n  return Math.round(wind) + ' m/s';\r\n}\r\n\r\nexport function  formatHumidity(humidity){\r\n    return humidity + ' %';\r\n}","import { setDate, formatDegree, formatHumidity, formatWind } from './functions';\r\n\r\nconst ForecastDaily = (props) => {\r\n\r\n  const imageUrl = `http://openweathermap.org/img/wn/${props.item.weather[0].icon}@4x.png`\r\n\r\n\treturn (\r\n\t\t<div className=\"daily\" key={props.index}>\r\n      <div className='daily__info'>\r\n        <div className='daily__date'>\r\n          <h2>{setDate(props.item.dt).dayName}</h2>\r\n          <p>{setDate(props.item.dt).dayDate}</p>\r\n        </div>\r\n        <img className='daily__image' src={imageUrl} />\r\n        <div className='daily__data'>\r\n          <div className=\"daily__cloud\"><p>Cloudness: {props.item.clouds}</p></div>\r\n          <div className=\"daily__wind\"><p>Wind speed: {formatWind(props.item.wind_speed)}</p></div>\r\n          <div className=\"daily__humidity\"> <p>Humidity: {formatHumidity(props.item.humidity)}</p></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"daily__temp\">\r\n        <div className=\"daily__mon\">\r\n          <div className='caption'><h3>Morning</h3></div>\r\n          <div className=\"temp\">{formatDegree(props.item.temp.morn)}</div>\r\n          <div className=\"feels\">feels like {formatDegree(props.item.feels_like.morn)}</div>\r\n        </div>\r\n        <div className=\"daily__day\">\r\n        <div className='caption'><h3>Day</h3></div>\r\n          <div className=\"temp\">{formatDegree(props.item.temp.day)}</div>\r\n          <div className=\"feels\">feels like {formatDegree(props.item.feels_like.day)}</div>\r\n        </div>\r\n        <div className=\"daily__eve\">\r\n        <div className='caption'><h3>Evening</h3></div>\r\n          <div className=\"temp\">{formatDegree(props.item.temp.eve)}</div>\r\n          <div className=\"feels\">feels like {formatDegree(props.item.feels_like.eve)}</div>\r\n        </div>\r\n        <div className=\"daily__night\">\r\n        <div className='caption'><h3>Night</h3></div>\r\n          <div className=\"temp\">{formatDegree(props.item.temp.night)}</div>\r\n          <div className=\"feels\">feels like {formatDegree(props.item.feels_like.night)}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default ForecastDaily;","import { formatDegree } from './functions';\r\n\r\nconst ForecastCurrent = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"current\">\r\n        <div className=\"daily__current\">\r\n          <div className=\"temp\"><h3>{formatDegree(props.current.temp)}</h3></div>\r\n          <div className=\"feels\">feels like {formatDegree(props.current.feels_like)}</div>\r\n        </div>\r\n        <h1 className='current__city'>{props.city && props.city[0].name}</h1>\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default ForecastCurrent;","import { useState, useEffect } from 'react';\r\nimport { setDate, formatDegree } from './functions';\r\n\r\nconst ForecastDays = (props) => {\r\n\r\n  const imageUrl = `http://openweathermap.org/img/wn/${props.item.weather[0].icon}@2x.png`;\r\n\r\n  return (\r\n    <>\r\n      { props.item &&\r\n    \t <div className='day'>\r\n    \t    <div className='day__date'>\r\n    \t      <h3>{setDate(props.item.dt).dayName}</h3>\r\n    \t      <div>{setDate(props.item.dt).dayDate}</div>\r\n    \t    </div>\r\n    \t    <div className='day__image'>\r\n    \t      <img src={imageUrl} />\r\n    \t    </div>\r\n    \t    <div className='day__info'>\r\n    \t      <div className=\"temp\">{formatDegree(props.item.temp.max)}</div>\r\n    \t    </div>\r\n    \t </div>\r\n      }\r\n  \t</>\r\n  );\r\n}\r\n\r\nexport default ForecastDays;","import { Tab, Tabs, AppBar  } from '@material-ui/core';\r\nimport { TabPanel, TabContext, TabList } from '@material-ui/lab';\r\nimport { useState, useEffect, Fragment } from 'react';\r\nimport ForecastDay from './ForecastDay';\r\nimport ForecastDays from './ForecastDays';\r\n\r\nconst ForecastList = (props) => {\r\n\r\n  const [tab, setTab] = useState(0);\r\n\r\n  const changeTab = (event, newTab) => {\r\n    setTab(newTab);\r\n  };\r\n\r\n  return (\r\n    <TabContext value={tab}>\r\n      {props.forecast.daily.map((item, index) => (\r\n        <TabPanel key={index} value={index}>\r\n          <ForecastDay item={item} index={index} />\r\n        </TabPanel>\r\n      ))}\r\n\r\n    <AppBar position=\"static\">\r\n      <TabList \r\n        orientation=\"vertical\" \r\n        onChange={changeTab} \r\n        aria-label='tabs'\r\n        indicatorColor=\"primary\"\r\n        variant=\"scrollable\"\r\n        className='tablist'\r\n      >\r\n        {props.forecast.daily.map((item, index) => (\r\n          <Tab \r\n            label={\r\n                    <Fragment> \r\n                      <ForecastDays item={item} index={index} />\r\n                    </Fragment> \r\n                  } \r\n            tab={index} \r\n            key={index}\r\n          />\r\n        ))}\r\n      </TabList>\r\n    </AppBar>\r\n    </TabContext>\r\n  );\r\n}\r\n\r\nexport default ForecastList;","import React from 'react';\r\nimport { useState, useEffect, Fragment } from 'react';\r\nimport ForecastDay from './ForecastDay'; \r\nimport ForecastCurrent from './ForecastCurrent';\r\nimport ForecastDays from './ForecastDays';\r\nimport ForecastList from './ForecastList';\r\n\r\nconst appID = '21bd6ece86599e9e3244ec3b7fb7cf35';\r\nconst defaultCoords = {lat: \"40.714291\", lon: \"-74.001954\"};\r\n\r\nconst ForecastWeather = () => {\r\n\r\n  const [forecast, setForecast] = useState(null);\r\n  const [city, setCity] = useState(null);\r\n  const [load, setLoad] = useState(false);\r\n  const [coords, setCoords] = useState(defaultCoords);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchForecast = (coords) => {\r\n    const urlForecast = `https://api.openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&appid=${appID}&units=metric&exclude=minutely,hourly,alerts`; \r\n    return fetch(urlForecast)\r\n      .then(response => response.json());  \r\n  }\r\n\r\n  const fetchCity = (coords) => {\r\n    const urlCity = `http://api.openweathermap.org/geo/1.0/reverse?lat=${coords.lat}&lon=${coords.lon}&limit=1&appid=${appID}`;\r\n    return fetch(urlCity)\r\n      .then(response => response.json());\r\n  }\r\n\r\n  const fetchData = (coords) => {\r\n    fetchForecast(coords).then(result => {\r\n      setForecast(result);\r\n    }).then(\r\n        fetchCity(coords).then(res => {\r\n          setCity(res);\r\n          setLoad(true);\r\n        }))\r\n  }\r\n\r\n  const checkLocation = () => {\r\n    return new Promise((res, rej) => {\r\n      navigator.geolocation.getCurrentPosition(res, rej);\r\n    });\r\n  } \r\n\r\n  useEffect(() => {\r\n    fetchData(coords);\r\n    checkLocation().then(\r\n      (position) => {\r\n        const coords = {lat: position.coords.latitude.toFixed(6), lon: position.coords.longitude.toFixed(6)}\r\n        fetchData(coords);\r\n        setCoords(coords)\r\n      }, \r\n      (error) => {\r\n        setError(error);\r\n      }) \r\n  }, ['forecast', 'city']);\r\n\r\n  return (\r\n    <div className='forecast'>\r\n      { error && <p className='alert'>Allow to use your location!</p>}\r\n      {!load && <p>Loading..</p>}\r\n      { load && forecast &&\r\n        <>          \r\n          <ForecastCurrent city={city} current={forecast.current}/>\r\n          <ForecastList forecast={forecast} />\r\n        </>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForecastWeather;","import './App.css';\nimport Forecast from './components/Forecast';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Forecast />\n    </div>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}